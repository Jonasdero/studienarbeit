{"rule":"OLD_SPELLING","sentence":"^\\QEin Beispiel hierfür ist Google, welches eine frei verwendbare Machine Learning API oder eine direkte Integration in die Google Photos App anbietet, welche die gemachten Bilder automatisch in verschiedene Kategorien aufteilt.\\E$"}
{"rule":"OLD_SPELLING","sentence":"^\\QVgl. Google Photos \\E(?:Dummy|Ina|Jimmy-)[0-9]+$"}
{"rule":"OLD_SPELLING","sentence":"^\\QEin Beispiel hierfür ist Google, welches eine frei verwendbare Machine Learning API oder eine direkte Integration, in die Google Photos App anbietet, welche die gemachten Bilder automatisch in verschiedene Kategorien aufteilt.\\E$"}
{"rule":"UNPAIRED_BRACKETS","sentence":"^\\QDa natürliche Sprache, die meist für Suchergebnisse genutzt wird, generell ungenau ist, wird mit sogenannten „Matching Functions\" versucht auch ungefähre Übereinstimmungen in einem Fließtext zu finden.\\E$"}
{"rule":"DE_AGREEMENT","sentence":"^\\QDa Suchmaschinen dem Nutzer eine bestmögliche User Experience ermöglichen wollen, sollen die gefundenen Websiten dies bieten.\\E$"}
{"rule":"ET","sentence":"^\\QVgl. Liu et.al., S. 1-3 \\E(?:Dummy|Ina|Jimmy-)[0-9]+$"}
{"rule":"TOO_LONG_PARAGRAPH","sentence":"^\\QDadurch sollen verhindert werden, dass von ähnlich relevante Suchergebnisse nur eines vorgeschlagen wird und ein Suchergebnis vorgeschlagen wird, welches für das gegebene Suchkriterium irrelevant ist.\\E$"}
{"rule":"UPPERCASE_SENTENCE_START","sentence":"^\\Qname=API, description=Application Programming Interface name=Crossload, description=Plattform zum Durchsuchen und Anhören einer umfassenden Predigt Datenbank name=Solr oder Apache Solr, description=Open Source Suchframework der Apache Foundation name=Suchmaschine, description=Eine Anwendung, die gezielt Ergebnisse aus dem Internet für den Nutzer aufbereitet und sortiert.\\E$"}
{"rule":"DE_CASE","sentence":"^\\QHier werden verschiedene Attribute in 3 Kategorien (Hoch, Mittel, Niedrig) wie folgend bewertet: Hoch: Titel, Serie, Thema, Autor Mittel: Untertitel, Schlagwörter, Kategorie, Thema Niedrig: Verlag, Standort, Dateiname, Speech to Text, Mitschrift, Suchsnippet Matching des Suchterms zu einem Bibelvers.\\E$"}
{"rule":"GERMAN_SPELLER_RULE","sentence":"^\\QHier werden verschiedene Attribute in 3 Kategorien (hoch, mittel, niedrig) wie folgend bewertet: Hoch: Titel, Serie, Thema, Autor Mittel: Untertitel, Schlagwörter, Kategorie, Thema Niedrig: Verlag, Standort, Dateiname, Speech to Text, Mitschrift, Suchsnippet Matching des Suchterms zu einem Bibelvers.\\E$"}
{"rule":"GERMAN_SPELLER_RULE","sentence":"^\\QIn der Such API muss hierfür zunächst die zurückgegebene Antwort um ein Vorschlagsobjekt (\"suggestion\") er\\E$"}
{"rule":"GERMAN_SPELLER_RULE","sentence":"^\\QLucene stellt dabei folgende Funktionen bereit: Sortierte Suche: die besten Ergebnisse werden zuerst bezeigt Leistungsstarke Queries: Phrasenabfragen, Platzhalterabfragen (\"wildcards\"), Abfragen zur Nähe, exakte Phrasenabfragen, Bereichsabfragen für Datum/Uhrzeit und Zahlen\\E$"}
{"rule":"DE_CASE","sentence":"^\\QLucene stellt dabei folgende Funktionen bereit: Sortierte Suche: die besten Ergebnisse werden zuerst bezeigt Leistungsstarke Queries: Phrasenabfragen, Platzhalterabfragen („wildcards“), Abfragen zur Nähe bzw. Ähnlichkeit eines Suchergebnisses („promixmity search“), exakte Phrasenabfragen, Bereichsabfragen für Datum/Uhrzeit und Zahlen Feldbasierte Suche: Alle oder bestimmte Felder durchsuchen Boolesche Operatoren: Beliebige Kombinationen zwischen Suchbegriffen (AND, OR, NOT) um einzelne Abfragen zu kombinieren.\\E$"}
